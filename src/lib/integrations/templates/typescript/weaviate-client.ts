/**
 * Weaviate Client for TypeScript
 * 
 * This file was automatically generated by Delovable to help you integrate
 * Weaviate vector database into your project.
 */

import weaviate, { WeaviateClient, ApiKey } from 'weaviate-ts-client';

/**
 * Configuration for Weaviate client
 */
export interface WeaviateConfig {
  scheme?: string;
  host: string;
  apiKey?: string;
}

/**
 * Default configuration for Weaviate Cloud Services
 * Replace with your own configuration
 */
const defaultConfig: WeaviateConfig = {
  scheme: 'https',
  host: 'your-cluster-id.weaviate.cloud',  // Replace with your Weaviate cluster
  apiKey: 'your-api-key',                  // Replace with your API key
};

/**
 * Create a Weaviate client instance
 */
export function createWeaviateClient(config: WeaviateConfig = defaultConfig): WeaviateClient {
  const clientConfig: any = {
    scheme: config.scheme || 'https',
    host: config.host,
  };

  // Add API key if provided
  if (config.apiKey) {
    clientConfig.apiKey = new ApiKey(config.apiKey);
  }

  return weaviate.client(clientConfig);
}

/**
 * Example: Create a schema class for storing documents
 */
export async function createDocumentSchema(client: WeaviateClient): Promise<void> {
  // Check if the class already exists
  const schemaRes = await client.schema.getter().do();
  const classExists = schemaRes.classes?.some(c => c.class === 'Document');
  
  if (classExists) {
    console.log('Document class already exists');
    return;
  }
  
  // Create the Document class
  const classObj = {
    class: 'Document',
    description: 'A document with text content',
    vectorizer: 'text2vec-transformers',  // You can change this to your preferred vectorizer
    properties: [
      {
        name: 'title',
        dataType: ['text'],
        description: 'The title of the document',
      },
      {
        name: 'content',
        dataType: ['text'],
        description: 'The content of the document',
      },
      {
        name: 'category',
        dataType: ['text'],
        description: 'The category of the document',
      },
      {
        name: 'url',
        dataType: ['text'],
        description: 'The URL of the document',
      },
      {
        name: 'createdAt',
        dataType: ['date'],
        description: 'When the document was created',
      }
    ],
  };
  
  try {
    await client.schema.classCreator().withClass(classObj).do();
    console.log('Created Document class successfully');
  } catch (error) {
    console.error('Error creating Document class:', error);
    throw error;
  }
}

/**
 * Example: Add a document to Weaviate
 */
export async function addDocument(
  client: WeaviateClient,
  document: {
    title: string;
    content: string;
    category?: string;
    url?: string;
  }
): Promise<string> {
  try {
    const result = await client.data
      .creator()
      .withClassName('Document')
      .withProperties({
        title: document.title,
        content: document.content,
        category: document.category || 'general',
        url: document.url,
        createdAt: new Date().toISOString(),
      })
      .do();
    
    console.log('Added document successfully:', result);
    return result.id;
  } catch (error) {
    console.error('Error adding document:', error);
    throw error;
  }
}

/**
 * Example: Search for documents by semantic similarity
 */
export async function searchDocuments(
  client: WeaviateClient,
  query: string,
  limit: number = 5
): Promise<any[]> {
  try {
    const result = await client.graphql
      .get()
      .withClassName('Document')
      .withFields('title content category url createdAt _additional { certainty }')
      .withNearText({ concepts: [query] })
      .withLimit(limit)
      .do();
    
    return result.data.Get.Document;
  } catch (error) {
    console.error('Error searching documents:', error);
    throw error;
  }
}
